\block{
    \define #demo;
    \call(\builtin(mapset) \call(\builtin(env)) \literal(#demo) \literal(25))
    \call(\builtin(print) \call(\builtin(mapget) \call(\builtin(env)) \literal(#demo)))
}

{
    \defsymbol #demo;
    @mapset(@env(#demo), 25);
    @print(@mapget(@env(), #demo));
}

auto_block {
    defsymbol #demo;
    call @mapset (array [@env, #demo, 25]);
    call @print (array [@mapget, call @env, #demo);
} @void;

//unrelated, a fun feature:
// a thing passed as aparameter could default to being readonly unless you & it
// not just a parameter, basically any expression slot or smth
//mapget expressions might be...
//&a.b.c needs to :: they could just all default to &
//
// let a = [1, 2]; (no type given so it infers [mut 1, mut 2];
// a[0] = 3; // 1. the type of a[0] is 1 so you can't set it to 3. 2: a[0] is no longer mutable
// let a = &[num# 1, num# 2];
// a[0] = 3; // ok (property access is automatically &)
// let some_fn = (arg: [&num, &num]) => arg[0] = 3;
// some_fn(a) // not ok, a is made immutable
// some_fn(&a) // ok
