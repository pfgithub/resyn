withenv @empty_map;
defsymbol #function_rt_v;
withenv (@mapset)[env #function_rt_v "function_returned"];

defsymbol #example_fn;
withenv (@mapset)[env #example_fn function
    (@typeOf)"fn_arg" :: #arg -> (@typeOf)(@mapget)[env #function_rt_v]:

    //block (@compileLog)(@typeOf)env;
    block (@print)"function was called. argument:";
    block (@print)(@mapget)[env #arg];
    (@mapget)[env #function_rt_v]
];

((@mapget)[env #example_fn])"fn_arg"

// there is an issue.
// 1. compile time code should run from left to right, top to bottom.
// 2. there should be order-independent declarations
// these two things are in conflict
// one of them must be sacrificed
// and it's likely 1.

// also, there's an issue now
// a mapget might have a side effect of executing comptime stuff
// so something needs to be done to make sure mapget can continue to not
// have side-effects

// eg env.#order_independent(#some_fn)
// like you call a fn to get the function
// because then it can have side effects and that's kinda expected
// and then we can just go top to bottom in the file, typechecking,
// and when it comes across that, env.#order_independent is a comptime
// thing

// so eg like uuh

// function any :: #order_independent -> auto: function ... -> ...: ...;
// and then in there, the inner function could access env.order_independent
// and would be able to access all the other fns or something
// so you'd declare them all in a big map. and the outer ones would be
// comptime fns so they don't execute immediately and only typecheck
// when called and then the inner ones are runtime fns so they
// typecheck immediately when seen.
// so you'd make an order independent block eg `namespace {...}` and then
// to get things from it you'd have to env.#thing(#fn_name) and it'd call
// at comptime and return the function for you.