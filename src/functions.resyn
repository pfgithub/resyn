withenv @empty_map;
defsymbol #function_rt_v;
withenv (@mapset)[env #function_rt_v "function_returned"];

defsymbol #example_fn;
withenv (@mapset)[env #example_fn function
    (@typeOf)"fn_arg" :: #arg -> (@typeOf)(@mapget)[env #function_rt_v]:

    //block (@compileLog)(@typeOf)env;
    block (@print)"function was called. argument:";
    block (@print)(@mapget)[env #arg];
    (@mapget)[env #function_rt_v]
];

((@mapget)[env #example_fn])"fn_arg"

// ok so:
// functions need order independent declarations
// so you should be able to declare two functions and:
// - analyze the arg types before analyzing the bodies
// maybe even just complete order-independence or something
// like start from the top and analyze all dependents
//
// not sure
//
// another thing : is it necessary to @typeOf in types?
// like what if typeOf was assumed
// then if you want to make a type you just make an
// example argument. and it would contain some special
// stuff like @any_string which is a value that cannot
// be represented at runtime but its type is that of
// any string
//
// essentially @as([]const u8, undefined) in zig eg
//
// that could be neat maybe
//
// back to the above,
// the issue with order independent decls is that
// comptime stuff might be impure and then the order
// would matter for the order of comptime execution